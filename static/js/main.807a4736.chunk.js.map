{"version":3,"sources":["Container/HomePage/constants.js","Config/apiConfig.js","Container/HomePage/actions.js","Components/Header/Header.js","Components/Loader/Loader.js","Container/HomePage/Lodable.js","Container/HomePage/DetailsPage.js","Container/App/App.js","Container/App/reducer.js","Container/App/constants.js","Container/HomePage/reducer.js","Utils/history.js","rootReducer.js","serviceWorker.js","index.js","configureStore.js"],"names":["POSTS_LIST","DETAIL_LIST","api","GETPOST","offset","limit","GETDETAILS","id","getPostsListAsync","page","dispatch","getState","axios","get","proxy","host","port","then","response","data","status","payload","type","catch","err","getDetailsListAsync","React","Component","LoadingIndicator","className","Lodable","loader","loading","Loader","connect","state","postsList","bindActionCreators","props","useState","detailData","setDetailData","useEffect","match","params","itemId","res","JSON","parse","stringify","Fragment","src","sprites","front_default","height","App","Helmet","name","content","exact","path","render","location","to","pathname","component","HomePage","DetailsPage","initialState","error","currentUser","userData","repositories","appReducer","action","newState","repos","username","postData","homeReducer","detailsData","history","createBrowserHistory","rootReducer","injectedReducers","combineReducers","global","globalReducer","router","connectRouter","postListData","Boolean","window","hostname","store","enhancers","composeEnhancers","compose","createStore","applyMiddleware","thunk","consfigureStore","MOUNT_NODE","document","getElementById","console","log","process","ReactDOM","basename","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.807a4736.chunk.js","sourcesContent":["export const POSTS_LIST = 'POSTS_LIST'\nexport const DETAIL_LIST = 'DETAIL_LIST'","export const api = {\n    posts:{\n        GETPOST : (offset, limit) => `https://pokeapi.co/api/v2/pokemon?offset=${offset}&limit=${limit})`,\n    },\n    detail:{\n        GETDETAILS : (id) => `https://pokeapi.co/api/v2/pokemon/${id}`\n    }\n} ","import { POSTS_LIST, DETAIL_LIST } from './constants'\nimport { api } from 'Config/apiConfig.js'\nimport axios from 'axios';\n\nexport function getPostsList(payload) {\n    return {\n        type: POSTS_LIST,\n        payload\n    };\n}\nexport function getDetailsList(payload) {\n    return {\n        type: DETAIL_LIST,\n        payload\n    };\n}\n\n//Action dispatcher\nexport const getPostsListAsync = (offset, page) => {\n    return (dispatch, getState) => {\n        return axios.get(api.posts.GETPOST(offset, page),{'headers':{'Access-Control-Allow-Origin' : '*', 'crossDomain':true },\n        proxy: {\n            host: 'http://localhost',\n            port: 3000\n          }\n    }\n    ).then(\n            response => {\n                if (response && response.data && response.status === 200) {\n                    return dispatch(getPostsList(response.data))\n                }\n            }\n        ).catch(err => {\n            throw err\n        })\n    }\n}\nexport const getDetailsListAsync = (id) => {\n    return (dispatch, getState) => {\n        return axios.get(api.detail.GETDETAILS(id),{'headers':{'Access-Control-Allow-Origin' : '*', 'crossDomain':true },\n        proxy: {\n            host: 'http://localhost',\n            port: 3000\n          }\n    }\n    ).then(\n            response => {\n                if (response && response.data && response.status === 200) {\n                    return dispatch(getDetailsList(response.data))\n                }\n            }\n        ).catch(err => {\n            throw err\n        })\n    }\n}\n\n\n","import React from 'react';\nimport './style.scss';\n\nclass Header extends React.Component {\n  render() {\n    var navData = ['TV', 'MOVIES', 'SPORTS','NEWS', 'PREMIUM']\n    return (\n        <div className='header'>\n        {navData.map((data, index)=>\n          <a href className='active' onClick={ ()=> this.props.history.push('/home')}>{data}</a>\n          )}\n            <div className='header-right'>\n                <a href onClick={ ()=> this.props.history.push('/')}>Logout</a>\n            </div>\n        </div>\n    );\n  }\n}\n\nexport default Header;","import React from 'react';\nimport './style.scss';\n\nconst LoadingIndicator = () => (\n  <div className=\"loading-indicator\">\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n);\n\nexport default LoadingIndicator;","import Lodable from 'react-loadable'\nimport Loader from 'Components/Loader'\nexport default Lodable({\n    loader: () => import('./index'),\n    loading: Loader\n})","import React, { useCallback, useState } from 'react';\nimport Header from 'Components/Header'\nimport PropTypes from 'prop-types';\nimport './HomePage.scss';\nimport { getDetailsListAsync} from './actions'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n\n\n\nconst DetailsPage = (props) => {\n    const [detailData, setDetailData] = useState(null);\n    React.useEffect(() => {\n        props.getDetailsListAsync(props.match.params.itemId).then((res) => setDetailData(JSON.parse(JSON.stringify(res.payload))));\n    }, []);\n    if(detailData){\n        return (\n            <React.Fragment>\n                <div className=\"detail-wrapper\">\n                <div className=\"left--block\">\n                    <img src={detailData.sprites.front_default}/>\n                </div>\n                <div className=\"right--block\">\n                    <h1>Height : {detailData.height}</h1>\n                </div>\n            </div>\n            </React.Fragment>\n        );\n    } else{\n        return(\n            'Data Not found'\n        )\n    }\n    }\nDetailsPage.propTypes = {\n    getDetailsListAsync : PropTypes.func.isRequired\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      postsList: state,\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({\n        getDetailsListAsync\n    }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DetailsPage)\n\n\n","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\n\nimport HomePage from 'Container/HomePage/Lodable';\nimport DetailsPage from 'Container/HomePage/DetailsPage';\nimport 'styles/globalStyle.scss';\n\nfunction App(props) {\n  return (\n    <div className='App'>\n    <Helmet>\n      <meta name='description' content=\"A React.js Boilerplate application\" />\n    </Helmet>\n      <Switch>\n        <Route\n        exact\n        path='/'\n        render={({ location }) => (\n          <Redirect to={{ ...location, pathname: \"/1\" }} />\n        )}\n        />\n        <Route exact path='/:pageId' component={HomePage}/>\n        <Route exact path='/details/:itemId' component={DetailsPage}/>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import { LOAD_REPOS_SUCCESS, LOAD_REPOS, LOAD_REPOS_ERROR } from './constants';\n\nexport const initialState = {\n    loading: false,\n  error: false,\n  currentUser: false,\n  userData: {\n    repositories: false,\n  },\n};\nfunction appReducer(state = initialState, action) {\n    switch (action.type) {\n      case LOAD_REPOS: {\n        const newState = {\n          ...state,\n          loading: true,\n          error: false,\n          userData: {\n            repositories: false,\n          },\n        };\n  \n        return newState;\n      }\n      case LOAD_REPOS_SUCCESS: {\n        const newState = {\n          ...state,\n          loading: false,\n          userData: {\n            repositories: action.repos,\n          },\n          currentUser: action.username,\n        };\n        return newState;\n      }\n  \n      case LOAD_REPOS_ERROR: {\n        return { ...state, error: action.error, loading: false };\n      }\n      default:\n        return state;\n    }\n  }\nexport default appReducer;\n","export const LOAD_REPOS = 'boilerplate/App/LOAD_REPOS';\nexport const LOAD_REPOS_SUCCESS = 'boilerplate/App/LOAD_REPOS_SUCCESS';\nexport const LOAD_REPOS_ERROR = 'boilerplate/App/LOAD_REPOS_ERROR';\nexport const DEFAULT_LOCALE = 'en';","import { POSTS_LIST, DETAIL_LIST } from './constants';\n\nexport const initialState = {\n    loading: false,\n    postData:[]\n};\nfunction homeReducer(state = initialState, action) {\n    switch (action.type) {\n      case POSTS_LIST: {\n        const newState = {\n          ...state,\n          loading: true,\n          postData: action.payload\n          \n        };\n  \n        return newState;\n      }\n      case DETAIL_LIST:{\n        const newState = {\n          ...state,\n          loading: true,\n          detailsData: action.payload\n          \n        };\n  \n        return newState;\n      }\n      default:\n        return state;\n    }\n  }\nexport default homeReducer;\n","import { createBrowserHistory } from 'history';\nconst history = createBrowserHistory();\nexport default history;\n","import { combineReducers } from 'redux'\nimport globalReducer from 'Container/App/reducer';\nimport homeReducer from 'Container/HomePage/reducer';\nimport { connectRouter } from 'connected-react-router';\nimport history from 'Utils/history';\n\n\nexport default function rootReducer(injectedReducers = {}) {\n    const rootReducer = combineReducers({\n        global:globalReducer,\n        router: connectRouter(history),\n        postListData:homeReducer,\n        ...injectedReducers\n    })\n    return rootReducer\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './Container/App';\nimport { ConnectedRouter } from 'connected-react-router';\nimport {Provider} from 'react-redux'\nimport consfigureStore from './configureStore'\nimport * as serviceWorker from './serviceWorker';\nimport history from 'Utils/history';\n\nconst initialState = {};\nconst store = consfigureStore(initialState, history);\nconst MOUNT_NODE = document.getElementById('root');\nconsole.log('sdfjhg', process.env.PUBLIC_URL)\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <App />\n        </BrowserRouter>\n    </Provider>\n, MOUNT_NODE);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './rootReducer'\n\nexport default function consfigureStore (initialState = {}) {\n    const enhancers = []\n    let composeEnhancers = compose\n  \n    if (process.env.NODE_ENV === 'development') { // enable dev tools for dev evt\n      if (typeof window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ === 'function') {\n        composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      }\n    }\n    return createStore(rootReducer(), initialState,\n    composeEnhancers(\n        applyMiddleware(thunk)),\n        ...enhancers\n      )\n}"],"sourceRoot":""}