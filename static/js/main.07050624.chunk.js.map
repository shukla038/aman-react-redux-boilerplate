{"version":3,"sources":["Container/PostsDetailPage/constants.js","Container/HomePage/constants.js","Components/Loader/Loader.js","Container/HomePage/Lodable.js","Container/LoginPage/Lodable.js","Container/PostsDetailPage/Lodable.js","Container/App/App.js","Container/App/constants.js","Container/App/reducer.js","Container/HomePage/reducer.js","Container/PostsDetailPage/reducer.js","Utils/history.js","rootReducer.js","serviceWorker.js","index.js","configureStore.js"],"names":["FILTERED_POSTS_LIST","COMMENTS_LIST","POSTS_LIST","LoadingIndicator","className","Lodable","loader","loading","Loader","App","props","Helmet","name","content","exact","path","component","LoginPage","HomePage","PostsDetailPage","LOAD_REPOS","LOAD_REPOS_SUCCESS","LOAD_REPOS_ERROR","initialState","error","currentUser","userData","repositories","appReducer","state","action","type","repos","username","postData","homeReducer","payload","postDetailData","postDetailReducer","commentsData","history","createBrowserHistory","rootReducer","injectedReducers","combineReducers","global","globalReducer","router","connectRouter","postListData","filteredPostListData","Boolean","window","location","hostname","match","store","composeEnhancers","compose","createStore","applyMiddleware","thunk","consfigureStore","MOUNT_NODE","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2GAAA,gEAAO,IAAMA,EAAsB,sBACtBC,EAAgB,iB,gCCD7B,gCAAO,IAAMC,EAAa,c,uNCgBXC,G,MAbU,kBACvB,yBAAKC,UAAU,qBACb,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,iCCVWC,MAAQ,CACnBC,OAAQ,kBAAM,oDACdC,QAASC,ICFEH,MAAQ,CACnBC,OAAQ,kBAAM,8BACdC,QAASC,ICFEH,MAAQ,CACnBC,OAAQ,kBAAM,oDACdC,QAASC,I,MCoBEC,MAff,SAAaC,GACX,OACE,yBAAKN,UAAU,OACf,kBAACO,EAAA,OAAD,KACE,0BAAMC,KAAK,cAAcC,QAAQ,wCAEjC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,QAAQC,UAAWE,IAC/B,kBAAC,IAAD,CAAOH,KAAK,aAAaC,UAAWG,O,sCClB/BC,EAAa,6BACbC,EAAqB,qCACrBC,EAAmB,mC,mjBCAzB,IAAMC,EAAe,CACxBhB,SAAS,EACXiB,OAAO,EACPC,aAAa,EACbC,SAAU,CACRC,cAAc,IAoCHC,MAjCf,WAAmD,IAA/BC,EAA8B,uDAAtBN,EAAcO,EAAQ,uCAC9C,OAAQA,EAAOC,MACb,KAAKX,EAUH,OATc,KACTS,EADS,CAEZtB,SAAS,EACTiB,OAAO,EACPE,SAAU,CACRC,cAAc,KAMpB,KAAKN,EASH,OARc,KACTQ,EADS,CAEZtB,SAAS,EACTmB,SAAU,CACRC,aAAcG,EAAOE,OAEvBP,YAAaK,EAAOG,WAKxB,KAAKX,EACH,OAAO,EAAP,GAAYO,EAAZ,CAAmBL,MAAOM,EAAON,MAAOjB,SAAS,IAEnD,QACE,OAAOsB,I,oOCtCR,IAAMN,EAAe,CACxBhB,SAAS,EACT2B,SAAS,IAkBEC,MAhBf,WAAoD,IAA/BN,EAA8B,uDAAtBN,EAAcO,EAAQ,uCAC/C,OAAQA,EAAOC,MACb,KAAK7B,IAQH,O,qVAPc,IACT2B,EADS,CAEZtB,SAAS,EACT2B,SAAUJ,EAAOM,UAMrB,QACE,OAAOP,I,2jBCjBR,IAAMN,EAAe,CACxBhB,SAAS,EACT8B,eAAe,IA4BJC,MA1Bf,WAA0D,IAA/BT,EAA8B,uDAAtBN,EAAcO,EAAQ,uCACrD,OAAQA,EAAOC,MACb,KAAK/B,IAQH,OAPc,KACT6B,EADS,CAEZtB,SAAS,EACT8B,eAAgBP,EAAOM,UAM3B,KAAKnC,IAQD,OAPY,KACP4B,EADO,CAEVtB,SAAS,EACTgC,aAAcT,EAAOM,UAM3B,QACE,OAAOP,I,OC3BAW,EADCC,c,4NCOD,SAASC,IAAoC,IAAxBC,EAAuB,uDAAJ,GAQnD,OAPoBC,Y,qVAAgB,EAChCC,OAAOC,EACPC,OAAQC,YAAcR,GACtBS,aAAad,EACbe,qBAAqBZ,GAClBK,ICFSQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IACMC,ECPS,WAA8C,IAApBjC,EAAmB,uDAAJ,GAEhDkC,EAAmBC,IAOvB,OAAOC,IAAW,WAAX,GAAYjB,IAAenB,EAClCkC,EACIG,YAAgBC,OAFb,OARW,KDMRC,CADO,GACuBtB,GACtCuB,EAAaC,SAASC,eAAe,QAE3CC,IAASC,OACL,kBAAC,IAAD,CAAUX,MAAOA,GACb,kBAAC,IAAD,CAAiBhB,QAASA,GACtB,kBAAC,EAAD,QAGVuB,GD6GI,kBAAmBK,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.07050624.chunk.js","sourcesContent":["export const FILTERED_POSTS_LIST = 'FILTERED_POSTS_LIST'\nexport const COMMENTS_LIST = 'COMMENTS_LIST'","export const POSTS_LIST = 'POSTS_LIST'","import React from 'react';\nimport './style.scss';\n\nconst LoadingIndicator = () => (\n  <div className=\"loading-indicator\">\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n    <div />\n  </div>\n);\n\nexport default LoadingIndicator;","import Lodable from 'react-loadable'\nimport Loader from 'Components/Loader'\nexport default Lodable({\n    loader: () => import('./index'),\n    loading: Loader\n})","import Lodable from 'react-loadable'\nimport Loader from 'Components/Loader'\nexport default Lodable({\n    loader: () => import('./index'),\n    loading: Loader\n})","import Lodable from 'react-loadable'\nimport Loader from 'Components/Loader'\nexport default Lodable({\n    loader: () => import('./index'),\n    loading: Loader\n})","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\n\nimport HomePage from 'Container/HomePage/Lodable'\nimport LoginPage from 'Container/LoginPage/Lodable'\nimport PostsDetailPage from 'Container/PostsDetailPage/Lodable' \nimport 'styles/globalStyle.scss';\n\nfunction App(props) {\n  return (\n    <div className='App'>\n    <Helmet>\n      <meta name='description' content=\"A React.js Boilerplate application\" />\n    </Helmet>\n      <Switch>\n        <Route exact path='/' component={LoginPage}/>\n        <Route path='/home' component={HomePage}/>\n        <Route path='/posts/:id' component={PostsDetailPage}/>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","export const LOAD_REPOS = 'boilerplate/App/LOAD_REPOS';\nexport const LOAD_REPOS_SUCCESS = 'boilerplate/App/LOAD_REPOS_SUCCESS';\nexport const LOAD_REPOS_ERROR = 'boilerplate/App/LOAD_REPOS_ERROR';\nexport const DEFAULT_LOCALE = 'en';","import { LOAD_REPOS_SUCCESS, LOAD_REPOS, LOAD_REPOS_ERROR } from './constants';\n\nexport const initialState = {\n    loading: false,\n  error: false,\n  currentUser: false,\n  userData: {\n    repositories: false,\n  },\n};\nfunction appReducer(state = initialState, action) {\n    switch (action.type) {\n      case LOAD_REPOS: {\n        const newState = {\n          ...state,\n          loading: true,\n          error: false,\n          userData: {\n            repositories: false,\n          },\n        };\n  \n        return newState;\n      }\n      case LOAD_REPOS_SUCCESS: {\n        const newState = {\n          ...state,\n          loading: false,\n          userData: {\n            repositories: action.repos,\n          },\n          currentUser: action.username,\n        };\n        return newState;\n      }\n  \n      case LOAD_REPOS_ERROR: {\n        return { ...state, error: action.error, loading: false };\n      }\n      default:\n        return state;\n    }\n  }\nexport default appReducer;\n","import { POSTS_LIST } from './constants';\n\nexport const initialState = {\n    loading: false,\n    postData:[]\n};\nfunction homeReducer(state = initialState, action) {\n    switch (action.type) {\n      case POSTS_LIST: {\n        const newState = {\n          ...state,\n          loading: true,\n          postData: action.payload\n          \n        };\n  \n        return newState;\n      }\n      default:\n        return state;\n    }\n  }\nexport default homeReducer;\n","import { FILTERED_POSTS_LIST, COMMENTS_LIST } from './constants';\n\nexport const initialState = {\n    loading: false,\n    postDetailData:[]\n};\nfunction postDetailReducer(state = initialState, action) {\n    switch (action.type) {\n      case FILTERED_POSTS_LIST: {\n        const newState = {\n          ...state,\n          loading: true,\n          postDetailData: action.payload\n          \n        };\n  \n        return newState;\n      }\n      case COMMENTS_LIST :{\n        const newState = {\n            ...state,\n            loading: true,\n            commentsData: action.payload\n            \n          };\n    \n          return newState;\n      }\n      default:\n        return state;\n    }\n  }\nexport default postDetailReducer;\n","import { createBrowserHistory } from 'history';\nconst history = createBrowserHistory();\nexport default history;\n","import { combineReducers } from 'redux'\nimport globalReducer from 'Container/App/reducer';\nimport homeReducer from 'Container/HomePage/reducer';\nimport postDetailReducer from 'Container/PostsDetailPage/reducer';\nimport { connectRouter } from 'connected-react-router';\nimport history from 'Utils/history';\n\n\nexport default function rootReducer(injectedReducers = {}) {\n    const rootReducer = combineReducers({\n        global:globalReducer,\n        router: connectRouter(history),\n        postListData:homeReducer,\n        filteredPostListData:postDetailReducer,\n        ...injectedReducers\n    })\n    return rootReducer\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Container/App';\nimport { ConnectedRouter } from 'connected-react-router';\nimport {Provider} from 'react-redux'\nimport consfigureStore from './configureStore'\nimport * as serviceWorker from './serviceWorker';\nimport history from 'Utils/history';\n\nconst initialState = {};\nconst store = consfigureStore(initialState, history);\nconst MOUNT_NODE = document.getElementById('root');\n\nReactDOM.render(\n    <Provider store={store}>\n        <ConnectedRouter history={history}>\n            <App />\n        </ConnectedRouter>\n    </Provider>\n, MOUNT_NODE);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './rootReducer'\n\nexport default function consfigureStore (initialState = {}) {\n    const enhancers = []\n    let composeEnhancers = compose\n  \n    if (process.env.NODE_ENV === 'development') { // enable dev tools for dev evt\n      if (typeof window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ === 'function') {\n        composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      }\n    }\n    return createStore(rootReducer(), initialState,\n    composeEnhancers(\n        applyMiddleware(thunk)),\n        ...enhancers\n      )\n}"],"sourceRoot":""}